<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Apple Mac OS X for x86-64) 2014.1 (Build 541U)" ts="2014-01-20 01:28:48">
<Class name="com.intersystems.persistence.objbinding.PersistenceManager">
<Final>1</Final>
<Abstract>1</Abstract>
<Import>%Exception</Import>
<TimeChanged>63207,5307.761673</TimeChanged>
<TimeCreated>63105,63347.210154</TimeCreated>

<Method name="Compress">
<ClassMethod>1</ClassMethod>
<FormalSpec>data:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if (data = "") {
		set $ecode = ""
		throw ##class(SystemException).%New("<ILLEGAL VALUE>", "78", $stack($stack(-1), "PLACE"))
	}

	#dim io = $io

	#dim filename as %String = "c-" _ $system.Util.CreateGUID() _ ".gz"
	open filename:("WLUN":/IOTABLE="UTF8":/GZIP=9)
	use filename
	write data
	close filename

	#dim bytesWritten as %Integer = ##class(%File).GetFileSize(filename)
	open filename:("RLUD":/IOTABLE="RAW")
	use filename
	try {
		#dim compressedData as %String
		read compressedData#$$$MaxStringLength
	} catch {
		close filename
		use io
		throw
	}

	close filename
	use io

	#dim bytesRead as %Integer = $length(compressedData)
	if (bytesRead '= bytesWritten) {
		throw ##class(SystemException).%New(, , , "Compress(): " _ bytesRead _ " byte(s) read; expected: " _ bytesWritten)
	}

	return compressedData
]]></Implementation>
</Method>

<Method name="Decompress">
<ClassMethod>1</ClassMethod>
<FormalSpec>data:%String,iotable:%String="UTF8"</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if (data = "") {
		set $ecode = ""
		throw ##class(SystemException).%New("<ILLEGAL VALUE>", "78", $stack($stack(-1), "PLACE"))
	}

	#dim io = $io

	#dim filename as %String = "d-" _ $system.Util.CreateGUID() _ ".gz"
	open filename:("WLUN":/IOTABLE="RAW")
	use filename
	write data
	close filename

	#dim bytesWritten as %Integer = ##class(%File).GetFileSize(filename)
	if ($length(data) '= bytesWritten) {
		throw ##class(SystemException).%New(, , , "Decompress(): " _ bytesWritten _ " byte(s) written; expected: " _ $length(data))
	}

	open filename:("RLUD":/IOTABLE=iotable:/GZIP=9)
	use filename
	#dim e as SystemException
	try {
		#dim decompressedData as %String
		read decompressedData#$$$MaxStringLength
	} catch (e) {
		if (e.Name = "<ENDOFFILE>") {
			/*
			 * We're trying to read an empty gzip stream.
			 */
			set decompressedData = ""
		} else {
			close filename
			use io
			throw e
		}
	}
	close filename
	use io	

	return decompressedData
]]></Implementation>
</Method>

<Method name="GetMaxStringLength">
<Description><![CDATA[
Return 3116853 until
<a href = "http://turbo.iscinternal.com/prodlog/itemedit.csp?OBJID=116022">PL 116022</a>
is fixed.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[$select(0: $$$MaxStringLength, 1: 3116853)
]]></Implementation>
</Method>

<Method name="Save">
<Description>
Accepts a gzip-compressed batch of events, decompresses and saves it.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>compressedData:%String</FormalSpec>
<Implementation><![CDATA[
	/*
	 * Decompressing binary data as UTF8 leads to data corruption.
	 */
	#dim data = ..Decompress(compressedData, "RAW")
	/*
	 * 1-based index.
	 */
	#dim position as %Integer = 1
	while (position <= $length(data)) {
		#dim tickerLength as %Integer = $ascii($extract(data, position))
		set position = position + 1 // 1 byte read
		#dim ticker as %String = $extract(data, position, position + tickerLength - 1)
		set position = position + tickerLength // N bytes read
		#dim per as %String = ..ReadIeee754Integer($extract(data, position, position + 3))
		set position = position + 4 // 4 bytes read
		#dim timestamp as %String = ..TimeMillisToTimeStamp(..ReadIeee754Integer($extract(data, position, position + 7)))
		set position = position + 8 // 8 bytes read
		#dim last as %String = ..ReadIeee754Double($extract(data, position, position + 7))
		set position = position + 8 // 8 bytes read
		#dim vol as %String = ..ReadIeee754Integer($extract(data, position, position + 7))
		set position = position + 8 // 8 bytes read
		set ^com.intersystems.perC21B.EventD($increment(^com.intersystems.perC21B.EventD)) = $listbuild(ticker, per, timestamp, last, vol)
	}
]]></Implementation>
</Method>

<Method name="ReadIeee754Integer">
<Description><![CDATA[
Assumes <code>binaryInteger</code> is an unsigned value.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>binaryInteger:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	#dim position as %Integer
	#dim result as %integer = 0
	for position = 1:1:$length(binaryInteger) {
		set result = (256 * result) + $ascii($extract(binaryInteger, position))
	}
	return result
]]></Implementation>
</Method>

<Method name="TimeMillisToTimeStamp">
<Description><![CDATA[
Converts the time in milliseconds since epoch (Jan 1st 1970 00:00:00 GMT) to <code>%TimeStamp</code>.
Currently, the millisecond fraction is discarded.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>timeMillis:%Integer</FormalSpec>
<ReturnType>%TimeStamp</ReturnType>
<Implementation><![CDATA[
	#dim timeSeconds as %Integer = timeMillis \ 1000
	#dim millisFraction as %Integer = timeMillis # 1000
	/*
	 * Pad the millisFraction with zeroes.
	 */
	while ($length(millisFraction) < 3) {
		set millisFraction = "0" _ millisFraction
	}
	return ##class(%TimeStamp).OdbcToLogical($zdatetime($zdatetimeh(timeSeconds, -2), 3) _ "." _ millisFraction)
]]></Implementation>
</Method>

<Method name="ReadIeee754Double">
<ClassMethod>1</ClassMethod>
<FormalSpec>binaryDouble:%String</FormalSpec>
<ReturnType>%Double</ReturnType>
<Implementation><![CDATA[
	/*
	 * To be implemented
	 */
	return $double(0)
]]></Implementation>
</Method>
</Class>
</Export>
