<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Apple Mac OS X for x86-64) 2013.2 (Build 461U)" ts="2013-11-07 15:44:47">
<Class name="com.intersystems.persistence.objbinding.PersistenceManagerTest">
<Final>1</Final>
<Abstract>1</Abstract>
<Hidden>1</Hidden>
<TimeChanged>63133,56578.660678</TimeChanged>
<TimeCreated>63105,63347.210154</TimeCreated>

<Method name="Main">
<Description>
Entry point for tests run from Cache'</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	
	do ..TestBinaryFileCompression()
	do ..TestAsciiCompression()
	do ..TestCyrillicCompression()
]]></Implementation>
</Method>

<Method name="TestAsciiCompression">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<Implementation><![CDATA[
	write "==== Testing ASCII data compression", !
	#dim i as %Integer
	write "---- Attempting to compress an empty string (should produce an exception)", !
	do ..TestCompression("")
	write "---- Simple compression tests", !
	do ..TestCompression("ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ")
	do ..TestCompression($char(0))
	#dim data as %String = ""
	; Latin, large volume:
	write "---- Compressing a long ASCII string", !
	for i = 1:1:70022 {
		set data = data _ "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"
	}
	do ..TestCompression(data)
]]></Implementation>
</Method>

<Method name="TestCyrillicCompression">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<Implementation><![CDATA[
	write "==== Testing Cyrillic data compression", !
	#dim i as %Integer
	#dim alphabet as %String = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя"
	
	write "---- Compressing a short string", !
	do ..TestCompression(alphabet)

	#dim data as %String = ""
	; decompressed data not the same
	write "---- Compressing a string longer than 16434 symbols (extra characters on decompression)", !
	set data = ""
	for i = 1:1:249 {
		set data = data _ alphabet
	}
	do ..TestCompression(data, 1, 1)
	
	; <SYSTEM> 10 zDecompress+18^com.intersystems.persistence.objbinding.PersistenceManager.2
	write "---- Compressing a string which is 147180 chars long (<SYSTEM>)", !
	set data = ""
	for i = 1:1:2230 {
		set data = data _ alphabet
	}
	do ..TestCompression(data, 1, 1)
]]></Implementation>
</Method>

<Method name="TestCompression">
<ClassMethod>1</ClassMethod>
<FormalSpec>s:%String,keepTempFiles:%Boolean=0,forceUnicode:%Boolean=0</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	#dim e as %Exception.SystemException
	#dim l as %Integer = $length(s)
	#dim compressedData as %String
#if 1
	try {
		set compressedData = $system.Util.Compress(s)
		write l, " compressed to ", $length(compressedData), !
		write "Decompression ", $select($system.Util.Decompress(compressedData) = s : "succeeded.", 1: "failed."), !
	} catch (e) {
		write e.DisplayString(), !
	}
#endif // 0

	try {
		set compressedData = ##class(PersistenceManager).Compress(s, keepTempFiles)
		write l, " compressed to ", $length(compressedData), !
		#dim decompressedData as %String = $select(
			forceUnicode: ##class(PersistenceManager).DecompressUnicode(compressedData, keepTempFiles),
			1: ##class(PersistenceManager).Decompress(compressedData, keepTempFiles))
		write "... decompressed to ", $length(decompressedData), !
		write "Decompression ", $select(decompressedData = s : "succeeded.", 1: "failed."), !
		if (decompressedData '= s) {
			#dim i as %Integer
			#dim errorSeen as %Boolean = 0
			for i = 1:1:$length(s) {
				if (($extract(s, i) '= $extract(decompressedData, i)) && ('errorSeen)) {
					set errorSeen = 'errorSeen
					write "At position ", i, ": ", $extract(s, i), " != ", $extract(decompressedData, i), !
				}
			}
		}
	} catch (e) {
		write e.DisplayString(), !
		if (e.Name '= "<ILLEGAL VALUE>") {
			write $zutil(56, 2), !
		}
	}
]]></Implementation>
</Method>

<Method name="GetOs">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<Private>1</Private>
<Implementation><![CDATA[$case($system.Version.GetOS(), "UNIX" : $piece($system.Version.GetPlatform(), " for ", 1), : $system.Version.GetOS())
]]></Implementation>
</Method>

<Method name="GetFileContents">
<ClassMethod>1</ClassMethod>
<FormalSpec>file:%File</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	#dim status as %Status
	
	set status = file.Open("RU:/IOTABLE=""RAW""")
	if ($$$ISERR(status)) {
		do file.Close()
		$$$ThrowStatus(status)
	}

	#dim contents as %String = file.Read($$$MaxStringLength, .status)
	do file.Close()
	$$$ThrowOnError(status)

	return contents
]]></Implementation>
</Method>

<Method name="TestBinaryFileCompression">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<Implementation><![CDATA[
	write "==== Testing binary data compression", !
	#dim filename as %String = $case(..GetOs(),
		"Apple Mac OS X" : "/bin/bash",
		"Red Hat Enterprise Linux" : "/bin/bash",
		"Windows" : "C:\ntldr",
		: "/dev/null")
	#dim file as %File = ##class(%File).%New(filename)

	write "File: ", filename, "; size: ", file.Size, !
	write "Fits into a single string: ", $case(file.Size <= $$$MaxStringLength, 1: "yes", :"no"), !
	#dim contents as %String = ..GetFileContents(file)
	write $length(contents), " byte(s) read", !

	// Write file contents to a new file without compression
	#dim outName0 as %String = "out0.bin"
	#dim out0 as %File = ##class(%File).%New(outName0)
	do out0.Open("WNU:/IOTABLE=""RAW""")
	do out0.Write(contents)
	do out0.Close()
	write out0.Size, " byte(s) written (w/o compression)", !

	// Write file contents to a new file *with* compression
	#dim e as %Exception.SystemException
	try {
		#dim outName1 as %String = "out1.bin"
		#dim out1 as %File = ##class(%File).%New(outName1)
		do out1.Open("WNU:/IOTABLE=""RAW""")
		#dim decompressedContents as %String = ##class(PersistenceManager).Decompress(##class(PersistenceManager).Compress(contents))
		w "Binary data equals: ", ..BooleanToString(decompressedContents = contents), !
		do out1.Write(decompressedContents)
		do out1.Close()
		write out1.Size, " byte(s) written (w/compression)", !
	} catch (e) {
		write e.DisplayString(), ! 
	}
	
	write "Now go ahead and compare ", filename, ", ", outName0, " and ", outName1, !
]]></Implementation>
</Method>

<Method name="BooleanToString">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>b:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[$select(b : "true", 1: "false")
]]></Implementation>
</Method>
</Class>
</Export>
